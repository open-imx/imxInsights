name: Release

on:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      actions: write

    strategy:
      matrix:
        python_version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Check out the release tag
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        ref: ${{ github.ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install hatch
        hatch env create

    - name: Lint and typecheck
      run: |
        hatch run lint-check

    - name: Test
      run: |
        hatch run test

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true

  release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Check out the release tag
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ github.ref }} # Ensures the workflow checks out the release tag

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install hatch

      - name: Build package
        run: |
          hatch build

      - name: Install built package
        run: |
          pip install dist/*.whl

      - name: Test imports
        run: |
          python -c "from imxInsights import *"

      - name: Mint API token
        id: mint-token
        run: |
          # Retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")
          
          # Exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")
          
          # Mask the newly minted API token to avoid accidental leaks
          echo "::add-mask::${api_token}"
          
          # Pass the API token as output for later steps
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

      - name: Build and publish on PyPI
        env:
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ steps['mint-token'].outputs['api-token'] }}
        run: |
          hatch publish
